{"version":3,"sources":["DrawBoard.js","Game.js","ReversiBoard.js","BasePlayer.js","HumanPlay.js","MctsPlayer.js","RandomPlay.js","index.js","Node.js"],"names":[],"mappings":"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","file":"public/app.js","sourcesContent":["import ReversiBoard, { W, B, InvalidMoveError} from './ReversiBoard';\nimport {MctsPlayer, RandomPlay} from './player';\n\nvar chessB = new Image();\nvar chessW = new Image();\n\n\nchessB.src=\"images/blackChess.png\";\nchessW.src=\"images/whiteChess.png\";\n\nvar images = [chessB, chessW];\nvar loadedCount = 0;\n\nexport function initialize() {\n  window.board = new ReversiBoard();\n  window.playerBlack = new MctsPlayer(B);\n  window.playerWhite = null;\n\n  for(var i = 0; i < 2; i++) {\n    images[i].onload = function() {\n      loadedCount++;\n      if (loadedCount == 2) {\n        drawBoard();\n\n        setTimeout(function() {\n          checkMove();\n          drawBoard();\n        }, 1);\n      }\n    }\n  }\n}\n\nexport function reset() {\n  initialize();\n}\n\nexport function drawBoard(){\n  var canvas = window.document.getElementById(\"canvas\");\n  var context = canvas.getContext(\"2d\");\n\n  context.fillStyle = \"#E4AC6A\";\n  context.fillRect(0, 0, canvas.width, canvas.height);\n\n  for(var count = 0; count <= 320; count += 40){\n    context.beginPath();\n    context.moveTo(0,count);\n    context.lineTo(320,count);\n    context.closePath();\n    context.stroke();\n\n    context.beginPath();\n    context.moveTo(count,0);\n    context.lineTo(count,320);\n    context.closePath();\n    context.stroke();\n  }\n\n  var boardData = window.board.getBoardData();\n\n  // draw current chess\n  for(var x = 0; x < 8; x++) {\n    for(var y = 0; y < 8; y++) {\n      if (boardData[x + y * 8] != null) {\n        drawChess(context, x, y, boardData[x + y * 8])\n      }\n    }\n  }\n}\n\nexport function checkMove() {\n  var turn = window.board.getTurn();\n  console.log(\"checkMove\");\n\n  if (turn == B) {\n    if (playerBlack != null) {\n      var position = window.playerBlack.getMove(window.board);\n      window.board.placePiece(B, position[0], position[1]);\n    }\n  }\n  else if (turn == W) {\n    if (playerWhite != null) {\n      var position = window.playerWhite.getMove(window.board);\n      window.board.placePiece(W, position[0], position[1]);\n    }\n  } else {\n    gameOver();\n  }\n\n}\n\nfunction gameOver() {\n  console.log(\"OVERRRRR\");\n}\n\nexport function touchBoard(pos){\n  var result = getCursorPosition(pos);\n\n  var x = parseInt(result.x / 40);\n  var y = parseInt(result.y / 40);\n\n  console.log(x + \", \" + y)\n\n  if (window.board.isValidPosition(x, y)) {\n    window.board.placePiece(window.board.getTurn(), x, y);\n  }\n  drawBoard();\n\n  setTimeout(function() {\n    checkMove();\n    drawBoard();\n  }, 1);\n}\n\nfunction getCursorPosition(event) {\n    var canvas = window.document.getElementById(\"canvas\");\n    var rect = canvas.getBoundingClientRect();\n    var x = event.clientX - rect.left;\n    var y = event.clientY - rect.top;\n    return {x, y};\n}\n\nexport function drawChess(context, x, y, color){\n  if( color == B ){\n    context.drawImage(chessB, x * 40 + 1.5, y * 40 + 1.5);\n  } else {\n    context.drawImage(chessW, x * 40 + 1.5, y * 40 + 1.5);\n  }\n}\n","import ReversiBoard, { W, B, InvalidMoveError} from './ReversiBoard';\nimport {RandomPlay, MctsPlayer} from './player';\n\nexport default class Game {\n  constructor(opts = {}) {\n    this.playerBlack = typeof opts.black == 'undefined' ? new RandomPlay(B) : new opts.black(B);\n    this.playerWhite = typeof opts.white == 'undefined' ? new MctsPlayer(W) : new opts.white(W);\n    this.board = new ReversiBoard();\n  }\n\n  start() {\n    while(this.board.getTurn() != null) {\n      switch(this.board.getTurn()) {\n        case W:\n          var position = this.playerWhite.getMove(this.board);\n          this.board.placePiece(W, position[0], position[1]);\n          break;\n        case B:\n          var position = this.playerBlack.getMove(this.board);\n          this.board.placePiece(B, position[0], position[1]);\n          break;\n        default:\n          break;\n      }\n      this.board.logBoard();\n    }\n\n    console.log(`W: ${this.board.getScore(W)}, B: ${this.board.getScore(B)}`);\n  }\n\n  reset() {\n    this.board = new ReversiBoard();\n  }\n}\n","export const W = 1, B = 2;\nexport class InvalidMoveError {};\n\nexport default class ReversiBoard {\n\n  constructor() {\n    this._boardData = (new Array(8 * 8)).fill(null);\n    this._boardData[3 + 3 * 8] = W;\n    this._boardData[4 + 3 * 8] = B;\n    this._boardData[3 + 4 * 8] = B;\n    this._boardData[4 + 4 * 8] = W;\n    this._turn = B;\n    this._clearCache();\n  }\n\n  getBoardData() {\n    return this._boardData;\n  }\n\n  getPosition(x, y) {\n    return this._boardData[x + y * 8];\n  }\n\n  getTurn() {\n    if (this.getValidPositions().length == 0) {\n      if (this._turn == B) {\n        this._turn = W;\n      } else if (this._turn == W) {\n        this._turn = B;\n      }\n\n      if (this.getValidPositions().length == 0) {\n        this._turn = null;\n      }\n    }\n\n    return this._turn;\n  }\n\n  flippedPositionsFor(x, y) {\n    // Use cache if available\n    if (typeof this._flippedPositionsCache[`${x}${y}`] === 'array') {\n      return this._flippedPositionsCache[`${x}${y}`];\n    }\n\n    var flippedPositions = [];\n    var currentBoardData = this.getBoardData();\n\n    if (currentBoardData[x + y * 8] != null) {\n      // Placing on a position that already has something on it is invalid, and\n      // yet will flip nothing, so just leave flippedPositions blank without\n      // doing anything else\n    } else {\n      for (let i=0; i<8; i++) {\n        for (let j=0; j<8; j++) {\n          if (this.willPositionFlip(i, j, x, y)) {\n            flippedPositions.push([i, j]);\n          }\n        }\n      }\n    }\n\n    // Keep the results in cache\n    this._flippedPositionsCache[`${x}${y}`] = flippedPositions;\n\n    return flippedPositions;\n  }\n\n  willPositionFlip(x, y, px, py) {\n    var currentBoardData = this.getBoardData();\n\n    // Placing on a position that already has something on it is invalid, and\n    // yet will flip nothing\n    if (currentBoardData[px + py * 8] != null) return false;\n\n    // Use cache if available\n    if (typeof this._flippedPositionsDataCache[`${px}${py}`] === 'array') {\n      return this._flippedPositionsDataCache[`${px}${py}`][x + y * 8];\n    }\n\n    var currentTurn = this._turn;\n    var flippedPositionsDataForPxPy = (new Array(8 * 8)).fill(false);\n\n    for (let dx=-1; dx<=1; dx++) {\n      for (let dy=-1; dy<=1; dy++) {\n        if (dx == 0 && dy == 0) continue;\n\n        let searchFootprints = [];\n        let searchMove = 1;\n\n        while (true) {\n          let searchPositionX = px + dx * searchMove;\n          let searchPositionY = py + dy * searchMove;\n          let searchPosition = currentBoardData[searchPositionX + searchPositionY * 8];\n\n          if (searchPositionX < 0 || searchPositionY < 0 || searchPositionX >= 8 || searchPositionY >= 8) {\n            break;\n          } else if (searchPosition != B && searchPosition != W) {\n            break;\n\n          } else if (searchPosition != currentTurn) {\n            searchFootprints.push([searchPositionX, searchPositionY]);\n\n          } else if (searchPosition == currentTurn) {\n            searchFootprints.forEach((searchFootprint) => {\n              flippedPositionsDataForPxPy[searchFootprint[0] + searchFootprint[1] * 8] = true;\n            });\n            break;\n          }\n\n          searchMove++;\n        }\n      }\n    }\n\n    // Keep the calculated data in cache\n    this._flippedPositionsDataCache[`${px}${py}`] = flippedPositionsDataForPxPy;\n\n    return flippedPositionsDataForPxPy[x + y * 8];\n  }\n\n  getValidPositions() {\n    // Use cache if available\n    if (typeof this._validPositionsCache === 'array') {\n      return this._validPositionsCache;\n    }\n\n    var validPositions = [];\n\n    for (let i=0; i<8; i++) {\n      for (let j=0; j<8; j++) {\n        if (this.isValidPosition(i, j)) {\n          validPositions.push([i, j]);\n        }\n      }\n    }\n\n    // Keep the data in cache\n    this._validPositionsCache = validPositions;\n\n    return validPositions;\n  }\n\n  isValidPosition(x, y) {\n    return (this.flippedPositionsFor(x, y).length > 0);\n  }\n\n  getScore(color) {\n    if (typeof this._scoreCache[color] !== 'undefined') {\n      return this._scoreCache[color];\n    }\n\n    var score = 0;\n\n    for (let i=0; i<(8*8); i++) {\n      if (this._boardData[i] == color) {\n        score++;\n      }\n    }\n\n    this._scoreCache[color] = score;\n\n    return score;\n  }\n\n  placePiece(color, x, y) {\n    if (color != this.getTurn()) throw new InvalidMoveError();\n    if (!this.isValidPosition(x, y)) throw new InvalidMoveError();\n\n    var positionsToFlip = this.flippedPositionsFor(x, y);\n\n    this._boardData[x + y * 8] = color;\n    positionsToFlip.forEach((flippedPosition) => {\n      this._boardData[flippedPosition[0] + flippedPosition[1] * 8] = color;\n    });\n\n    if (color == W) {\n      this._turn = B;\n    } else if (color == B) {\n      this._turn = W;\n    }\n\n    this._clearCache();\n    return this;\n  }\n\n  setBoardDataForTesting(boardData) {\n    this._boardData = boardData;\n    this._clearCache();\n  }\n\n  setTurnForTesting(turn) {\n    this._turn = turn;\n    this._clearCache();\n  }\n\n  setBoardData(boardData, turn) {\n    this._boardData = boardData;\n    this._turn = turn;\n    this._clearCache();\n    return this;\n  }\n\n  getWinner() {\n    var blackCounts = this.getScore(B);\n    var whiteCounts = this.getScore(W);\n\n    if (this.isFull()) {\n      return blackCounts > whiteCounts ? B : W; // tie goes to white\n    }\n\n    var blackValidMoves = (new ReversiBoard()).setBoardData(this._boardData, B);\n    if (blackValidMoves.length > 0) return false;\n\n    var whiteValidMoves = (new ReversiBoard()).setBoardData(this._boardData, W);\n    if (whiteValidMoves.length > 0) return false;\n\n    return blackCounts > whiteCounts ? B : W; // tie goes to white\n  }\n\n  isFull() {\n    for (let i = 0; i < this._boardData.length; i++) {\n      if (this._boardData[i] == null) return false;\n    }\n    return true;\n  }\n\n  _clearCache() {\n    this._flippedPositionsDataCache = {};\n    this._flippedPositionsCache = {};\n    this._validPositionsCache = undefined;\n    this._scoreCache = {};\n  }\n\n  logBoard() {\n    var p = (c) => {\n      if (c == null) return ' ';\n      if (c == B) return 'X';\n      if (c == W) return 'O';\n    }\n\n    var b = this._boardData;\n\n    console.log('  0 1 2 3 4 5 6 7');\n    for (let i=0; i<8; i++) {\n      let line = [i];\n      for (let j=0; j<8; j++) {\n        line.push(p(b[i * 8 + j]));\n      }\n      console.log(line.join(' '));\n    }\n  }\n}\n","export default class BasePlayer {\n  constructor(color) {\n    this.color = color;\n  }\n\n  getMove() {\n    throw \"Method Not Implemented\"\n  }\n}\n","import BasePlayer from './BasePlayer';\nimport readlineSync from 'readline-sync';\n\nexport default class HumanPlay extends BasePlayer {\n\n  getMove(board) {\n    var line = readlineSync.question('Enter position(x,y): ');\n    var strs = line.trim().split(',')\n\n    return strs.map(input => parseInt(input))\n  }\n}\n","// ref1: https://github.com/andysalerno/reversi-ai\n// ref2: http://www.cameronius.com/cv/mcts-survey-master.pdf\nimport BasePlayer from './BasePlayer';\nimport Node from './mcts/Node';\nimport ReversiBoard, { W, B } from '../ReversiBoard';\nimport '../utils';\n\nexport default class MctsPlayer extends BasePlayer {\n  getMove(board) {\n    var curBoard = this.boardFromState(board.getBoardData(), board._turn);\n    var pos = this.monteCarloTreeSearch(curBoard)\n    return pos;\n  }\n\n  monteCarloTreeSearch(board) {\n    var rootNode = new Node(board);\n    var simCount = 0\n\n    var begin = new Date().getTime();\n    while (new Date().getTime() - begin < 3000) {\n      var pickedNode = this.treePolicy(rootNode);\n      var result = this.simulate(pickedNode.gameState);\n      this.backPropogation(pickedNode, result);\n      simCount += 1;\n    }\n\n    for (let child in rootNode.children) {\n      var {wins, plays} = rootNode.children[child].getWinsPlays();\n      var position = rootNode.children[child].move;\n      // console.log(`${position}: (${wins}/${plays})`);\n    }\n    // console.log(`${simCount} simulations performed.`);\n\n    return this.bestAction(rootNode)\n  }\n\n  bestAction(node) {\n    var mostPlays = Number.NEGATIVE_INFINITY;\n    var bestWins = Number.NEGATIVE_INFINITY;\n    var bestActions = [];\n\n    for (let child in node.children) {\n      var { wins, plays } = node.children[child].getWinsPlays();\n      if (plays > mostPlays) {\n        mostPlays = plays;\n        bestActions = [node.children[child].move]\n      } else if (plays == mostPlays) {\n        if (wins > bestWins) {\n          bestWins = wins\n          bestActions = [node.children[child].move]\n        } else if (wins == bestWins) {\n          bestActions = [...bestActions, node.children[child].move]\n        }\n      }\n    }\n\n    // console.log(bestActions);\n    // console.log(this.color);\n\n    return bestActions[this.randomPick(0, bestActions.length-1)];\n  }\n\n  backPropogation(node, delta) {\n    while(node.parent != null) {\n      node.plays += 1;\n      node.wins += delta;\n      node = node.parent;\n    }\n\n    node.plays += 1;\n    node.wins += delta;\n  }\n\n  treePolicy(rootNode) {\n    var curNode = rootNode;\n\n    while(true) {\n      var legalMoves = this.boardFromState(curNode.gameState.boardData, curNode.gameState.turn).getValidPositions();\n      if (legalMoves.length == 0) {\n        if (this.boardFromState(curNode.gameState.boardData, curNode.gameState.turn).getWinner()) {\n          // game is won\n          return curNode;\n        } else {\n          var passNode = new Node(this.boardFromState(curNode.gameState.boardData, opponent(curNode.gameState.turn)));\n          curNode.addChild(passNode);\n          curNode = passNode;\n          continue;\n        }\n\n      } else if (curNode.children.length < legalMoves.length ) { // not fully expanded\n        var unexpanded = legalMoves.filter(move => !curNode.hasVisited(move) );\n        // console.log(`unexpanded: ${unexpanded}, legalMoves: ${legalMoves}`);\n        // for (var move in curNode.movesExpanded.values()) {console.log(`${move}, `)};\n\n        var move = unexpanded[this.randomPick(0, unexpanded.length-1)];\n        var nextBoard = this.boardFromState(curNode.gameState.boardData, curNode.gameState.turn).placePiece(curNode.gameState.turn, move[0], move[1]);\n        var nextNode = new Node(nextBoard, move);\n\n        curNode.addChild(nextNode);\n        return nextNode;\n\n      } else {\n        curNode = this.bestChild(curNode);\n      }\n    }\n\n    return curNode;\n  }\n\n  bestChild(node) {\n    var C = 1; // 'exploration' value\n    var max = { node: null, value: Number.NEGATIVE_INFINITY };\n\n    for (var child in node.children) {\n      var { wins, plays } = node.children[child].getWinsPlays();\n      var { plays: parentPlays } = node.getWinsPlays();\n\n      var value = (wins / plays) + C * Math.sqrt(2 * Math.log(parentPlays) / plays);\n      if ( value > max.value ) {\n        max.node = node.children[child];\n        max.value = value;\n      }\n    }\n\n    return max.node;\n  }\n\n  simulate(gameState) {\n    const WIN_PRIZE = 1;\n    const LOSS_PRIZE = 0;\n\n    var state = Object.assign({}, gameState);\n\n    while(true) {\n      var curBoard = this.boardFromState(state.boardData, state.turn);\n      var winner = curBoard.getWinner();\n\n      if (winner) {\n        return winner == this.color ? WIN_PRIZE : LOSS_PRIZE;\n      }\n\n      var moves = curBoard.getValidPositions();\n      if (moves.length == 0) {\n        state = Object.assign({}, state, {turn: opponent(state.turn)} );\n        moves = this.boardFromState(state.boardData, state.turn).getValidPositions();\n      }\n\n      var pickedMove =  moves[this.randomPick(0, moves.length-1)];\n      var nextBoard = this.boardFromState(state.boardData, state.turn).placePiece(state.turn, pickedMove[0], pickedMove[1]);\n      state = {boardData: nextBoard.getBoardData(), turn: nextBoard._turn};\n    }\n  }\n\n  randomPick(min, max) {\n    return Math.floor(Math.random()*(max-min+1)+min);\n  }\n\n  boardFromState(boardData, turn) {\n    return new ReversiBoard().setBoardData([...boardData], turn);\n  }\n}\n","import BasePlayer from './BasePlayer';\n\nexport default class RandomPlay extends BasePlayer {\n\n  getMove(board) {\n    var validPositions = board.getValidPositions();\n    return validPositions[this.randomPick(0, validPositions.length-1)];\n  }\n\n  randomPick(min, max) {\n    return Math.floor(Math.random()*(max-min+1)+min);\n  }\n}\n","import { W, B } from '../ReversiBoard';\n\nexport function opponent(color) {\n  return color == B ? W : B;\n}\n","export default class Node {\n  constructor(board, move=null) {\n    this.gameState = { boardData: board.getBoardData(), turn: board.getTurn() };\n    this.plays = 0;\n    this.wins = 0;\n    this.children = [];\n    this.parent = null;\n    this.movesExpanded = new Set();\n    this.move = move;\n  }\n\n  addChild(node) {\n    this.children = [...this.children, node];\n    this.movesExpanded.add(node.move);\n    node.parent = this;\n    return this;\n  }\n\n  hasVisited(move) {\n    return this.movesExpanded.has(move);\n  }\n\n  hasChildren() {\n    return this.children.length > 0\n  }\n\n  getWinsPlays() {\n    return {\n      wins: this.wins,\n      plays: this.plays\n    }\n  }\n}\n"]}